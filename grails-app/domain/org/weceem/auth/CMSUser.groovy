/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.weceem.auth

import java.util.Date;

import com.airgroup.domain.OrderEmployee;
import com.airgroup.domain.Remark;

/**
 * User for user account
 * @author generated by plugin script
 */
class CMSUser {
    static transients = ['springSecurityService',"pass", 'roleIds','roleAuthorities']
	static mappedBy = [bookEmloyee:'bookEmp', processEmployee:'processEmp']
    static hasMany = [authorities: CMSRole,bookEmloyee:OrderEmployee,processEmployee:OrderEmployee,remarks:Remark]
	
    def springSecurityService
	
	String code
	String name
	String phoneNumber
	Date regDate
	Date lastAccessTime
	String username
	String password
	Short status
	Short callCenterStatus	//Trang thai nhan vien truc tong dai
	String yahoo
	String skype
    /** plain password to create a MD5 password */
    String pass = "secret"

    static mappingRole = {
        cache usage: 'read-write'
        username index: 'userName_Idx'
    }

    static constraints = {
		code(blank:false, unique:true, maxSize:25, matches:/[a-zA-Z0-9]+/)
		name blank:false, maxSize:100, matches:"^[\\p{L}0-9 .'-]+"
		phoneNumber nullable: true, blank:true, matches:/\d{8,15}/
        username(blank: false, unique: true, minSize:3, maxSize:45, matches:/[a-zA-Z0-9\-_.]+/)
        password(blank: false, minSize:6, maxSize:100, matches:/[a-zA-Z0-9\-_.!@#$%^&*(){},;]+/)
        pass(blank: false, nullable: false, size: 6..45)
		status nullable: true
		callCenterStatus nullable: true
		yahoo nullable: true, maxSize: 50, unique: true, matches:/[a-zA-Z0-9\-_.]+/
		skype nullable: true, maxSize: 50, unique: true, matches:/[a-zA-Z0-9\-_.]+/
		lastAccessTime nullable: true
    }

    def getRoleAuthorities() {
        return authorities*.authority
    }
    
    List getRoleIds() {
        authorities.collect { it.id }
    }
    
    void setRoleIds(List ids) {
        this.authorities = []
        this.authorities = ids.collect { CMSRole.get(it) }
    }
    
    void setPass(String newPass) {
        password = springSecurityService.encodePassword(newPass)
    }
	static mapping={
		table 'tbl_employee'
		id generator:'identity'
		version false
	}
	String toString() {
		"${username}"
	}
}